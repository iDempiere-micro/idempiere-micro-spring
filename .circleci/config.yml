# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # we still want to run on JDK 8
      - image: circleci/openjdk:8-jdk-node-browsers-legacy
      
      # we still want to support 9.6, the list is at https://circleci.com/docs/2.0/circleci-images/#postgresql
      - image: circleci/postgres:9.6-alpine-postgis-ram
        environment:
          POSTGRES_USER: adempiere
          POSTGRES_PASSWORD: adempiere
          POSTGRES_DB: idempiere

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      JWT_SECRET: Em3u7dCZ2QSvSGSGSRFUTfrwgu3WjfU2rHZxSjNSqU5x89C3jXPL6WLMW7dTE6rd9NRgWAwUWHkj8ZLfbCNU8uVfv9kuBmWCYPkk776A5jQ2LeJ76bZbdhXN
      JWT_ISSUER: Kotlin&Spring
      CONNECTION: xyzCConnection[name=0.0.0.0{localhost-idempiere-adempiere},AppsHost=0.0.0.0,WebPort=8081,SSLPort=8443,type=PostgreSQL,DBhost=localhost,DBport=5432,DBname=idempiere,BQ=false,FW=false,FWhost=,FWport=0,UID=adempiere,PWD=adempiere]
      CC_TEST_REPORTER_ID: ca3d430349a110fe3eac29ede69be4aa1c31bfc34538926d55d638ae63976f07

    steps:
      - add_ssh_keys:
          fingerprints:
            - "67:f0:5b:1b:10:ba:3a:d5:b2:d6:80:da:83:63:a6:99"
      - checkout

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run the migrations
      - run:
          name: DB Migrations
          command: rm -rf ./src/main/resources/db/migration/V1__iDempiere_5.1.0.sql; ( cd ./src/main/resources/db/migration/; gunzip -k V1__iDempiere_5.1.0.sql.gz ); mvn flyway:migrate

      # run tests!
      - run: 
          name: Compile the code and package it
          command: mvn package

      # get the code climate test reporter    
      - run:
          name: Generate the site if on develop branch
          command: |
            if [ "$CIRCLE_BRANCH" == "develop" ];
            then
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter
              ./cc-test-reporter before-build
              mvn site
              cp -R src/main/kotlin/* src/main/java/
              touch src/main/java/software/hsharp/core/util/ParseKt.java
              ./cc-test-reporter format-coverage target/site/cobertura/coverage.xml  -t cobertura
              ./cc-test-reporter upload-coverage -r ca3d430349a110fe3eac29ede69be4aa1c31bfc34538926d55d638ae63976f07
              rm src/main/java/software/hsharp/core/util/ParseKt.java
              find src/main/java -type f -name "*.kt" -delete
              (cd /tmp; rm -rf idempiere-micro-spring-site; git clone git@github.com:iDempiere-micro/idempiere-micro-spring-site.git; cd idempiere-micro-spring-site; rm -rf *)
              cp -r target/site/* /tmp/idempiere-micro-spring-site
              git log -1 --pretty=%B >/tmp/message.txt
              git config --global user.email "circleci@circleci.com" && git config --global user.name "CircleCI"
              (cd /tmp/idempiere-micro-spring-site; git add -A && git commit -F /tmp/message.txt && git push)
            fi
      - run: 
          name: Integration test
          command: ./integration_test.sh            

  deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Develop to Dokku
          command:
            ssh-keyscan staging-aws.hsharp.software >> ~/.ssh/known_hosts && git push dokku@staging-aws.hsharp.software:idempiere-micro-spring develop
  deploy_master:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Dokku
          command:
            ssh-keyscan prod.hsharp.software >> ~/.ssh/known_hosts && git push dokku@prod.hsharp.software:idempiere-micro-spring master

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: 
                - develop
      - deploy_master:
          requires:
            - build
          filters:
            branches:
              only: 
                - master
